#!/usr/bin/perl
#######################################################################
## Executable
## insertTicket manager
## Usage:
## insertTicket start|stop|status|restart
## Developed on GNU/Linux environment
## 
## insertTicket 0.1 RunUp
## Develped by Hugo Maza Moreno
## hugo.maza@gmail.com
## 
## Copyright (C) 2017  Hugo Maza M.
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
## 
#######################################################################
use strict;
use FindBin qw($RealBin);

our $yaomiquiDir = $RealBin;

if ( $ARGV[0] =~ /start|stop|restart|status/ ) {
	if ( $ARGV[0] eq "start" ) { &start; };
	if ( $ARGV[0] eq "stop" ) { &stop; }
	if ( $ARGV[0] eq "restart" ) { &stop; sleep 1; &start; }
	if ( $ARGV[0] eq "status" ) { &status; }
} else {
	print "Error: not recognized option: '$ARGV[0]'
	Usage:
	./insertTicket [start|stop|restart|status]\n";
}

exit;

sub start {
	unless ( get_pid("insertTicket.pl") ) {
		unless ( system("nohup $yaomiquiDir/insertTicket.pl >/dev/null 2>&1 &") ) {
			print "OK. insertTicket started with PID " . get_pid("insertTicket.pl") . "\n";
			
		} else {
			print "Can't get up the insertTicket\n";
			exit;
		}
	} else {
		print "insertTicket is already running with PID " . get_pid("insertTicket.pl") . "\n";
		
	}
}

sub stop {
	#~ unless ( system("kill -SIGINT " . get_pid("insertTicket.pl")) ) {
	unless ( system("kill -15 " . get_pid("insertTicket.pl")) ) {
		print "OK. insertTicket stoped\n";
	} else {
		print "Can't get down insertTicket\n";
	}
}

sub status {
	my $pid = get_pid("insertTicket.pl");
	chomp $pid;
	if ( $pid ) {
		print "insertTicket is running with PID " . get_pid("insertTicket.pl") . "\n";
	} else {
		print "insertTicket is not running\n";
	}
}

sub get_pid {
	my $process = shift;
	my $pid = `ps -eo pid,command | grep '$process' | grep -v grep | sed 's/^\\s//' | awk '{print \$1}'`;
	chomp $pid;
	$pid =~ s/\n/ /g if $pid =~ /\n/;
	return $pid;
}
